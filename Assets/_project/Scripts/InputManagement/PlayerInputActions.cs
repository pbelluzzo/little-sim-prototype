//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_project/Scriptable/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LittleSimPrototype.InputManagement
{
    public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""CharacterMap"",
            ""id"": ""e9ea84ca-fa2c-4e22-9173-39c80c94df6d"",
            ""actions"": [
                {
                    ""name"": ""WalkAction"",
                    ""type"": ""Value"",
                    ""id"": ""5e273e5b-0257-404a-82a4-fb62ab1d99f4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""48055d66-40f2-4c17-868b-0b1aec7fdd33"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0ad12173-dbd6-4cf2-a5e6-f086f1d6d145"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""be9a1ad7-73f7-4efa-8af6-2943e87c602f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""77400287-9548-4888-b7f1-ce2d6300c453"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a45ebde3-b73b-447a-8951-a2b27d8cdc6e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CharacterMap
            m_CharacterMap = asset.FindActionMap("CharacterMap", throwIfNotFound: true);
            m_CharacterMap_WalkAction = m_CharacterMap.FindAction("WalkAction", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CharacterMap
        private readonly InputActionMap m_CharacterMap;
        private ICharacterMapActions m_CharacterMapActionsCallbackInterface;
        private readonly InputAction m_CharacterMap_WalkAction;
        public struct CharacterMapActions
        {
            private @PlayerInputActions m_Wrapper;
            public CharacterMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @WalkAction => m_Wrapper.m_CharacterMap_WalkAction;
            public InputActionMap Get() { return m_Wrapper.m_CharacterMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterMapActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterMapActions instance)
            {
                if (m_Wrapper.m_CharacterMapActionsCallbackInterface != null)
                {
                    @WalkAction.started -= m_Wrapper.m_CharacterMapActionsCallbackInterface.OnWalkAction;
                    @WalkAction.performed -= m_Wrapper.m_CharacterMapActionsCallbackInterface.OnWalkAction;
                    @WalkAction.canceled -= m_Wrapper.m_CharacterMapActionsCallbackInterface.OnWalkAction;
                }
                m_Wrapper.m_CharacterMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @WalkAction.started += instance.OnWalkAction;
                    @WalkAction.performed += instance.OnWalkAction;
                    @WalkAction.canceled += instance.OnWalkAction;
                }
            }
        }
        public CharacterMapActions @CharacterMap => new CharacterMapActions(this);
        public interface ICharacterMapActions
        {
            void OnWalkAction(InputAction.CallbackContext context);
        }
    }
}
